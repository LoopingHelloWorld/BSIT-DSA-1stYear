#include <iostream>
using namespace std;
const int MAX_SIZE = 100; // set max cap. of array
int arr[MAX_SIZE];
int size = 5; // default element count present sa main menu
void displayArray() { // Function para sa live display
    cout << "My array element: ";
    for (int i = 0; i < size; ++i) {
        cout << arr[i];
        if (i != size - 1)
            cout << ", ";
    }
    cout << endl;
}
void traverse() { // returning da choice value
    displayArray();
    char choice;
    cout << "Return to menu? (Y/N): ";
    cin >> choice;
    if (choice == 'Y' || choice == 'y')
        return;
}
void insertion() { // function para sa specific pos ng element
    int option;
    cout << "Insertion at:\n";
    cout << "1. Beginning\n";
    cout << "2. End\n";
    cout << "3. Specific Position\n";
    cout << "Select an option: ";
    cin >> option;
    int value;
    switch (option) { //options sc para sa positioning ng index. wag galawin muna
        case 1:
            cout << "Enter value to insert at the beginning: ";
            cin >> value;
            for (int i = size; i > 0; --i)
                arr[i] = arr[i - 1]; //
            arr[0] = value;
            ++size;
            break;
        case 2:
            cout << "Enter value to insert at the end: ";
            cin >> value;
            arr[size] = value;
            ++size;
            break;
        case 3: {
            int pos;
            cout << "Enter position to insert: ";
            cin >> pos;
            if (pos < 0 || pos > size) {
                cout << "Invalid position!\n";
                break;
            }
            cout << "Enter value to insert: ";
            cin >> value;
            for (int i = size; i > pos; --i)
                arr[i] = arr[i - 1];
            arr[pos] = value;
            ++size;
            break;
        }
        default:
            cout << "Invalid option!\n";
            break;
    }
    displayArray();
    char choice;
    cout << "Do you want to add another element? (Y/N): ";
    cin >> choice;
    if (choice == 'Y' || choice == 'y')
        insertion();
}

void deletion() {
    int option;
    cout << "Deleting at:\n";
    cout << "1. Beginning\n";
    cout << "2. End\n";
    cout << "3. Specific Position\n";
    cout << "Select an option: ";
    cin >> option;
    switch (option) {
        case 1:
            if (size == 0) {
                cout << "Array is empty!\n";
                break;
            }
            for (int i = 0; i < size - 1; ++i)
                arr[i] = arr[i + 1]; // fix later
            --size;
            break;
        case 2:
            if (size == 0) {
                cout << "Array is empty!\n";
                break;
            }
            --size;
            break;
        case 3: {
            int pos;
            cout << "Enter position to delete: ";
            cin >> pos;
            if (pos < 0 || pos >= size) {
                cout << "Invalid position!\n";
                break;
            }
            for (int i = pos; i < size - 1; ++i)
                arr[i] = arr[i + 1];
            --size;
            break;
        }
        default:
            cout << "Invalid option!\n";
            break;
    }
    displayArray();
    char choice;
    cout << "Do you want to delete another element? (Y/N): ";
    cin >> choice;
    if (choice == 'Y' || choice == 'y')
        deletion();
}

void search() {
    int option;
    cout << "Searching by:\n";
    cout << "1. Index\n";
    cout << "2. Value\n";
    cout << "Select an option: ";
    cin >> option;
    switch (option) {
    	{
        case 1:
            int index;
            cout << "Enter index to search: ";
            cin >> index;
            if (index >= 0 && index < size)
                cout << "Element at index " << index << ": " << arr[index] << endl;
            else
                cout << "Invalid index!\n";
            break;
    }
        case 2: {
            int value;
            bool found = false;
            cout << "Enter value to search: ";
            cin >> value;
            for (int i = 0; i < size; ++i) {
                if (arr[i] == value) {
                    cout << "Value " << value << " found at index " << i << endl;
                    found = true;
                    break;
                }
            }
            if (!found)
                cout << "Value not found!\n";
            break;
        }
        default:
            cout << "Invalid option!\n";
            break;
    }
}

void update() {
    int option;
    cout << "Updating by:\n";
    cout << "1. Index\n";
    cout << "2. Value\n";
    cout << "Select an option: ";
    cin >> option;
    switch (option) {
    	case 1:
            int index, newValue;
            cout << "Enter index to update: ";
            cin >> index;
            if (index >= 0 && index < size) {
                cout << "Enter new value: ";
                cin >> newValue;
                arr[index] = newValue;
                displayArray();
            } else {
                cout << "Invalid index!\n";
            }
            break;
        case 2: {
            int oldValue, updatedValue;
            cout << "Enter value to update: ";
            cin >> oldValue;
            bool found = false;
            for (int i = 0; i < size; ++i) { // brb this part
                if (arr[i] == oldValue) {
                    cout << "Enter new value: ";
                    cin >> updatedValue;
                    arr[i] = updatedValue;
                    found = true;
                    break;
                }
            }
            if (!found)
                cout << "Value not found!\n";
            break;
        }
        default:
            cout << "Invalid option!\n";
            break;
    }
}

int main() {
    arr[0] = 10; // default elements
    arr[1] = 20;
    arr[2] = 30;
    arr[3] = 40;
    arr[4] = 50;
    while (true) { // main menu now with loops
        cout << "---------------------------------------\n";
        cout << "         Array Data Structure\n";
        cout << "---------------------------------------\n";
        displayArray();
        cout << "---------------------------------------\n";
        cout << "1. Traverse\n";
        cout << "2. Insertion\n";
        cout << "3. Deletion\n";
        cout << "4. Search\n";
        cout << "5. Update\n";
        cout << "6. Display\n";
        cout << "\nSelect an Option 1 to 6: ";
        int option;
        cin >> option;
        switch (option) {
            case 1:
                traverse();
                break;
            case 2:
                insertion();
                break;
            case 3:
                deletion();
                break;
            case 4:
                search();
                break;
            case 5:
                update();
                break;
            case 6:
                displayArray();
                cout << "Press Enter to continue...";
                cin.ignore(); // get sum thing here to clear
                cin.get();
                break;
            default:
                cout << "Invalid option!\n";
                break;
        }
    }
    return 0;
}
